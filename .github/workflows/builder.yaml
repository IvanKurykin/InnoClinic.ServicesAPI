name: Services API CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  DEFAULT_CONNECTION: ${{ secrets.DEFAULT_CONNECTION }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Restore dependencies
        run: dotnet restore InnoClinic.ServicesAPI/InnoClinic.ServicesAPI.sln -p:Configuration=Release
      - name: Build
        run: dotnet build InnoClinic.ServicesAPI/InnoClinic.ServicesAPI.sln --configuration Release --no-restore

  docker:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      port: ${{ steps.start-mssql.outputs.port }}
    steps:
      - uses: actions/checkout@v4
      - name: Install SQL Server tools
        run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
          sudo apt-get update
          sudo apt-get install -y mssql-tools unixodbc-dev
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> $HOME/.bashrc
          source $HOME/.bashrc
      - name: Run MSSQL Docker container
        id: start-mssql
        run: |
          PORT=$(shuf -i 1500-1600 -n 1)
          docker run -d \
            -e 'ACCEPT_EULA=Y' \
            -e "SA_PASSWORD=${{ secrets.SQL_SERVER_PASSWORD }}" \
            -p $PORT:1433 \
            --name mssql-server \
            mcr.microsoft.com/mssql/server:2022-latest
          echo "port=$PORT" >> $GITHUB_OUTPUT
          sleep 30

  test:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v4
      - name: Install SQL Server tools
        run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
          sudo apt-get update
          sudo apt-get install -y mssql-tools unixodbc-dev
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> $HOME/.bashrc
          source $HOME/.bashrc
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Restore dependencies
        run: dotnet restore InnoClinic.ServicesAPI/InnoClinic.ServicesAPI.sln -p:Configuration=Release
      - name: Build
        run: dotnet build InnoClinic.ServicesAPI/InnoClinic.ServicesAPI.sln --configuration Release --no-restore
      - name: Wait for MSSQL to be ready
        run: |
          echo "Waiting for MSSQL on port ${{ needs.docker.outputs.port }}..."
          for i in {1..30}; do
            if /opt/mssql-tools/bin/sqlcmd -S localhost,${{ needs.docker.outputs.port }} -U sa -P "${{ secrets.SQL_SERVER_PASSWORD }}" -Q "SELECT 1"; then
              echo "MSSQL is ready!"
              exit 0
            fi
            echo "Attempt $i: MSSQL not ready yet, retrying in 2 seconds..."
            sleep 2
          done
          echo "MSSQL did not become ready in time."
          exit 1
      - name: Run tests
        env:
          TEST_DB_CONNECTION_STRING: "Server=localhost,${{ needs.docker.outputs.port }};User Id=sa;Password=${{ secrets.SQL_SERVER_PASSWORD }};TrustServerCertificate=True;MultipleActiveResultSets=true;"
        run: dotnet test InnoClinic.ServicesAPI/InnoClinic.ServicesAPI.sln --no-build --configuration Release --logger "trx;LogFileName=test_results.trx" --verbosity detailed
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: '**/test_results.trx'

  analyze:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Sonar Scan
        uses: highbyte/sonarscan-dotnet@v2.3.0
        with:
          sonarProjectKey: ${{ secrets.SONAR_PROJECT_KEY }}
          sonarProjectName: ${{ secrets.SONAR_PROJECT_NAME }}
          sonarOrganization: ${{ secrets.SONAR_ORGANIZATION }}
          dotnetBuildArguments: InnoClinic.ServicesAPI/InnoClinic.ServicesAPI.sln --configuration Release
          dotnetTestArguments: InnoClinic.ServicesAPI/InnoClinic.ServicesAPI.sln --no-build --configuration Release --verbosity normal --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          sonarBeginArguments: /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" /d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx" /d:sonar.coverage.exclusions="**/Program.cs,**/DI/*,**/Context/*,**/Services/*,**/Migrations/**" /d:sonar.exclusions="**/Migrations/**"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          DEFAULT_CONNECTION: ${{ secrets.DEFAULT_CONNECTION }}