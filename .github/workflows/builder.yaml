name: Services API CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  DEFAULT_CONNECTION: ${{ secrets.DEFAULT_CONNECTION }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore InnoClinic.ServicesAPI/InnoClinic.ServicesAPI.sln -p:Configuration=Release

      - name: Build
        run: dotnet build InnoClinic.ServicesAPI/InnoClinic.ServicesAPI.sln --configuration Release --no-restore

  docker:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      port: ${{ steps.start-mssql.outputs.port }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Run MSSQL Docker container
        id: start-mssql
        run: |
          PORT=$(shuf -i 1500-1600 -n 1)
          docker run -d \
            -e 'ACCEPT_EULA=Y' \
            -e "SA_PASSWORD=${{ secrets.SQL_SERVER_PASSWORD }}" \
            -p $PORT:1433 \
            --name mssql-server \
            mcr.microsoft.com/mssql/server:2022-latest
          echo "::set-output name=port::$PORT"
          sleep 30

  test:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore InnoClinic.ServicesAPI/InnoClinic.ServicesAPI.sln -p:Configuration=Release

      - name: Build
        run: dotnet build InnoClinic.ServicesAPI/InnoClinic.ServicesAPI.sln --configuration Release --no-restore

      - name: Run tests
        env:
          TEST_DB_CONNECTION_STRING: "Server=localhost,${{ needs.docker.outputs.port }};User Id=sa;Password=${{ secrets.SQL_SERVER_PASSWORD }};TrustServerCertificate=True;MultipleActiveResultSets=true;"
        run: dotnet test InnoClinic.ServicesAPI/InnoClinic.ServicesAPI.sln --no-build --configuration Release

  analyze:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore InnoClinic.ServicesAPI/InnoClinic.ServicesAPI.sln -p:Configuration=Release

      - name: Sonar Scan
        uses: highbyte/sonarscan-dotnet@v2.3.0
        with:
          sonarProjectKey: ${{ secrets.SONAR_PROJECT_KEY }}
          sonarProjectName: ${{ secrets.SONAR_PROJECT_NAME }}
          sonarOrganization: ${{ secrets.SONAR_ORGANIZATION }}
          dotnetBuildArguments: InnoClinic.ServicesAPI/InnoClinic.ServicesAPI.sln --configuration Release
          dotnetTestArguments: InnoClinic.ServicesAPI/InnoClinic.ServicesAPI.sln --no-build --configuration Release --verbosity normal --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          sonarBeginArguments: /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" /d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx" /d:sonar.coverage.exclusions="**/Program.cs,**/DI/*,**/Context/*,**/Services/*,**/Migrations/**" /d:sonar.exclusions="**/Migrations/**"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          DEFAULT_CONNECTION: ${{ secrets.DEFAULT_CONNECTION }}
